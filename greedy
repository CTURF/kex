#!/usr/bin/env python3

# sample usage: ./greedy.py 512 256 3 0 2
# CSIDH-512 prime
# >=2^256 keys
# B=3
# force the 0 largest primes to be skipped
# try to use 2 cores

from multiprocessing import Pool

from memoized import memoized
import distmults
import costs
import sys
import math

def printstatus(prefix,cost,N0,m0,numprimes1):
  N = N0 if numprimes1 == 0 else N0+(numprimes1,)
  m = m0 if numprimes1 == 0 else m0+(0,)
  print('%s %.2f %.5f %s %s' % (prefix,cost,math.log(keys(N0, m0), 2), str(N).replace(' ',''),str(m).replace(' ','')))

def costfunction(primes0,primes1,N0,m0):
  primes = primes0+primes1
  N = N0+(len(primes1),) if len(primes1) > 0 else N0
  m = m0+(0,) if len(primes1) > 0 else m0
  x = distmults.average(primes,N,m)
  return costs.mults(x,primes,N,m)

@memoized
def batchkeys(x,y):
  poly = [1]
  for i in range(x):
    newpoly = poly+[0]
    for j in range(len(poly)):
      newpoly[j+1] += poly[j]
    poly = newpoly
  for i in range(y):
    newpoly = poly+[0]
    for j in range(len(poly)):
      newpoly[j+1] += 2*poly[j]
    poly = newpoly
  return poly[x]

@memoized
def keys(N,m):
  result = 1
  assert len(N) == len(m)
  assert N[0] == 1 # This doesn't work unless the 2-isogenies are in their own batch
  for i,v in enumerate(zip(N,m)):
    s, b = v
    batch_possibilities = batchkeys(s,b)
    if i == 0:
      batch_possibilities -= 1
    result *= batch_possibilities
  return result

# neighboring_intvec; search upwards in non-b directions
def searchup(minkeyspace,primes0,primes1,N0,m0,cost,b,best):
  if cost >= best[0]:
    return best
  if keys(N0,m0) >= minkeyspace:
    return cost,m0

  B0 = len(N0)

  for c in range(0, B0):
    if c == b: continue
    upm = list(m0)
    upm[c] += 1
    upm = tuple(upm)
    upcost = costfunction(primes0,primes1,N0,upm)
    best = searchup(minkeyspace,primes0,primes1,N0,upm,upcost,b,best)
  return best

def optimizem(minkeyspace,primes0,primes1,N0,m0=None):
  B0 = len(N0)

  if m0 == None:
    N0 = tuple(N0)
    assert sum(N0) == len(primes0)
  
    z = 1
    while True:
      m0 = tuple([z] * B0)
      if keys(N0,m0) >= minkeyspace: break
      z += 1
  else:
    while keys(N0,m0) < minkeyspace:
      m0 = list(m0)
      m0[0] += 1
      m0 = tuple(m0)

  cost = costfunction(primes0,primes1,N0,m0)

  while True:
    #printstatus('searching',cost,N0,m0,len(primes1))
    #sys.stdout.flush()

    best = cost,m0
    for b in range(B0):
      if m0[b] == 0: continue
      newm = list(m0)
      newm[b] -= 1
      newm = tuple(newm)
      newcost = costfunction(primes0,primes1,N0,newm)
      best = searchup(minkeyspace,primes0,primes1,N0,newm,newcost,b,best)
    if best == (cost,m0): break
    cost,m0 = best

  return cost,m0

def optimizeNm(minkeyspace,primes0,primes1,B,parallelism=1):
  B0 = B-1 if len(primes1) > 0 else B

  B1 = B - 1
  N0 = (1, *tuple((len(primes0) - 1)//B1+(j<(len(primes0) - 1)%B1) for j in range(B1)))

  cost,m0 = optimizem(minkeyspace,primes0,primes1,N0)

  while True:
    best = cost,N0,m0
    variants = []
    for b in range(1, B0):
      if N0[b] <= 1: continue
      for c in range(1, B0):
        if c == b: continue
        newsize = list(N0)
        newsize[b] -= 1
        newsize[c] += 1
        newsize = tuple(newsize)
        variants += [(minkeyspace,primes0,primes1,newsize,m0)]
    with Pool(parallelism) as p:
      results = p.starmap(optimizem,variants,chunksize=1)
    for (newcost,newm),(_,_,_,newsize,_) in zip(results,variants):
      if newcost < best[0]:
        best = newcost,newsize,newm
    if best == (cost,N0,m0): break
    cost,N0,m0 = best

  return cost,N0,m0

def doit():
  sys.setrecursionlimit(10000)
  print('-' * 90)
  print(sys.argv)

  p = {}
  p['cturf-505'] = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 373, 379, 383)
  p['cturf-1023'] = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 719, 727, 733, 751, 761)


  primes = p['cturf-505']
  if len(sys.argv) > 1:
    primes = p[sys.argv[1]]

  minkeyspace = 2**256
  if len(sys.argv) > 2:
    minkeyspace = 2**(float(sys.argv[2]))

  B = 3
  if len(sys.argv) > 3:
    B = int(sys.argv[3])
  assert B >= 1
  assert B <= len(primes)

  numprimes1 = 0
  if len(sys.argv) > 4:
    numprimes1 = int(sys.argv[4])
  assert 0 <= numprimes1
  primes0 = primes[:len(primes)-numprimes1]
  primes1 = primes[len(primes)-numprimes1:]
  assert len(primes1) == 0
  assert 2 in primes0

  parallelism = 1
  if len(sys.argv) > 5:
    parallelism = int(sys.argv[5])

  cost,N0,m0 = optimizeNm(minkeyspace,primes0,primes1,B,parallelism)
  printstatus('output',cost,N0,m0,len(primes1))
  print()

if __name__ == '__main__':
  doit()
